version: '3.9'
services:
 ## Vue (Nginx) Frontend
 frontend:
  container_name: frontend
  build:
   context: ./client
   dockerfile: Dockerfile
  volumes:
   - ./client:/app
  restart: on-failure
  environment:
   - VITE_PROTOCOL=${PROTOCOL}
   - VITE_APP_HOST=${APP_HOST}
  depends_on:
   - backend
  ports:
   - '5173:5173'

 ## NodeJS-Express Backend
 backend:
  container_name: backend
  build:
   context: ./server
   dockerfile: Dockerfile
  #  TODO: Remove ports as soon as nginx setup works?
  ports:
   - '8080:8080'
  volumes:
   - ./server:/app
  restart: on-failure
  environment:
   - APP_HOST=${APP_HOST}
   - APP_PORT=${APP_PORT}
   - NEO4J_URI=${NEO4J_URI}
   - NEO4J_USER=${NEO4J_USER}
   - NEO4J_PW=${NEO4J_PW}
   - NODE_ENV=${NODE_ENV}
   - PROTOCOL=${PROTOCOL}
  depends_on:
   - neo4j

 # Neo4j Database
 neo4j:
  container_name: neo4j
  image: neo4j:5.19
  restart: unless-stopped
  ports:
   - 7474:7474
   - 7687:7687
  volumes:
   - ./neo4j/plugins:/var/lib/neo4j/plugins
   - ./neo4j/backups:/var/lib/neo4j/backups
   - ./neo4j/data:/data
  environment:
   NEO4J_AUTH: ${NEO4J_USER}/${NEO4J_PW}
   NEO4J_PLUGINS: '["apoc", "apoc-extended"]'
   apoc.initializer.neo4j.0: CREATE CONSTRAINT collection_uuid IF NOT EXISTS FOR (c:Collection) REQUIRE c.uuid IS UNIQUE
   apoc.initializer.neo4j.1: CREATE CONSTRAINT text_uuid IF NOT EXISTS FOR (t:Text) REQUIRE t.uuid IS UNIQUE
   apoc.initializer.neo4j.2: CREATE CONSTRAINT character_uuid IF NOT EXISTS FOR (ch:Character) REQUIRE ch.uuid IS UNIQUE
   apoc.initializer.neo4j.3: CREATE CONSTRAINT annotation_uuid IF NOT EXISTS FOR (a:Annotation) REQUIRE a.uuid IS UNIQUE
   apoc.initializer.neo4j.4: CREATE CONSTRAINT entity_uuid IF NOT EXISTS FOR (e:Entity) REQUIRE e.uuid IS UNIQUE
